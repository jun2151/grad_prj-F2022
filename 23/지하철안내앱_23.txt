
1. 다음역이 갈아타야 할 환승역인 경우 
   사용자에게 알림기능을 주기위하여 경로찾기 기능을 추가하였습니다 
   도착역에서 목적지 역을 가기 위하여 환승경로를 찾으려면 
   어떤 경로로 가야 빠르게 갈수 있는지를 찾아야 합니다 
   이 기능을 구현하기 위하여 DFS(depth first search) 알고리즘을 사용하여 
   구현할 수 있었습니다.
   StationInfo의 인접역 정보를 사용하여 경로찾기를 구현하기 위하여 
   새로운 클래스인 StationLinke에 가능한 다음역과 이전역 정보를 구성하였습니다
   그리고 도착역 기준으로 목적지역에 도찾할때 까지 가능한 경로를 DFS를 사용하여 탐색하고 
   가능한 경로가 여러가지 경우가 나오는경우 가장 짦은 경로에 해당하는 경로로
   환승역과 화면에 표시하였습니다.
   다음역이 경로찾기에서 찾은 환승역일 경우 목적지 역과 동일하게 알림 화면을 띄우고 알람을 
   울리도록 하였습니다 

2. 관련 클래스 
   StationLink: 역번호 기준으로 갈수있는 다음역들과 이전역 정보를 저장함 
   PathFinder: 도착지역부터 목적지역까지 갈수 있는 경우의 수에 대하여 탐색을 하여 
               가능한 경로를 찾습니다 
   화면에는 가장 짤은경로의 환승역을 표시합니다 
   
3. 관련코드    
. LocService의 makeLinkData() 메소드:
  StationInfo 지하철역 정보로부터 경로찾기를 위한 StationLink 데이터 생성 
. LocService의 findPath() 메소드:
  경로찾기 버튼을 클릭하면 PathFinder의 search() 메소드를 호출하며 
  결과값으로 찾은 최단경로의 환승역을 표시함  
  
. PathFinder의 search() 메소드:
  시작역번호와 종료역번호를 입력으로 받아서 dfs 메소드를 호출하고 
  나온 여러개의 경로중 가장 짤은 경로의 데이터를 return함 
. PathFinder의 dfs() 메소드:
  시작역과 종착역이 같아지면 탐색 종료: 경로를 찾은경우 
  환승역이 많아지면 탐색종료
	 
  for (int i = 0; i < start.getNextCount(); i++) {
    가능한 다음역 에 대하여 다시 재귀적으로 dfs 메소드 호출 
  }
  for (int i = 0; i < start.getPrevCount(); i++) {
    가능한 이전역 에 대하여 다시 재귀적으로 dfs 메소드 호출 
  }
	 
	 